Scenario I 
In this scenario, we are interested in modeling student enrollment in Stanford courses. We would like to
answer questions such as:
• Which courses are most popular? Which instructors are most popular?
• Which courses are most popular among graduate students? Undergraduates? • Are there courses for which the
assigned classrooms is too large or too small?
We are planning to have a course enrollment fact table with the grain of one row per student per course enrollment.
In other words, if a student enrolls in 5 courses there will be 5 rows for that student in the fact table. We will use the
following dimensions: Course, Department, Student, Term, Classroom, and Instructor. There will be a single fact
measurement column, EnrollmentCount. Its value will always be equal to 1.
We are considering several options for dealing with the Instructor dimension. Interesting attributes of instructors
include FirstName, LastName, Title (e.g. Assistant Professor), Department, and TenuredFlag. The difficulty is that a
few courses (less than 5%) have multiple instructors. Thus it appears we cannot include the Instructor dimension in
the fact table because it doesn’t match the intended grain. Here are the options under consideration:
Option A
ModifytheInstructordimensionbyaddingspecialrowsrepresentinginstructorteams.Forexample,CS276ais taught by
Manning and Raghavan, so there will be an Instructor row representing “Manning/Raghavan” (as well as separate
rows for Manning and Raghavan, assuming that they sometimes teach courses as sole instructors). In this way, the
Instructor dimension becomes true to the grain and we can include it in the fact table.
Option B
Change the grain of the fact table to be one row per student enrollment per course per instructor. For example, there
will be two fact rows for each student enrolled in CS 276a, one that points to Manning as an instructor and one that
points to Raghavan. However, each of the two rows will have a value of 0.5 in the EnrollmentCount field instead of
a value of 1, in order to allow the fact to aggregate properly. (Enrollments are “allocated” equally among the
multiple instructors.)
Option C
Change the grain of the fact table to be one row per student enrollment per course per instructor. For example, there
will be two fact rows for each student enrolled in CS 276a, one that points to Manning as an instructor and one that
points to Raghavan. However, each of the two rows will have a value of 0.5 in the EnrollmentCount field instead of
a value of 1, in order to allow the fact to aggregate properly. (Enrollments are “allocated” equally among the
multiple instructors.)
Create two fact tables. The first has the grain of one row per student enrollment per course and doesn’t include the
Instructor dimension. The second has the grain of one row per student enrollment per course per instructor and
includes the Instructor dimension (as well as all the other dimensions). Unlike Option B, the value of
EnrollmentCount will be 1 for all rows in the second fact. Tell warehouse users to use the second fact table for
queries involving attributes of the instructor dimension and the first fact table for all other queries.

Please answer the following questions.
Question 1. What are the strengths and weaknesses of each option?
Answer:
Option A:In the given option by adding special rows and separate rows for these instructors might cause a complex data analysis as they will be in instructor and 
         special rows which will cause complexity. But, in terms of fact table grain the EnrollmentCount will be same which is equal to 1.
Option B:In this option the complexity will be decreased as the data is de-normalised in terms of instructors for the course and the issue for this is the fact table
          size will be incresed as there are many rows for the student as well as the course enrollment will be increased.
Option C:In this option the total size will be increasing as there are 2 fact tables but in terms of analysis the we need to join the tables which will be costly in 
         terms of joins. But the grain will be maintained which will be not effected. 
         
Question 2. Which option would you choose and why?
Answer:I would choose Option B because there a no complexity from the dimension tables on the instructors and no need of having another fact table for instructor as it would
       decrease the storage usage and only workaround is on the EnrollmentCount filed as if any instructor gets added to the course then we need to modify the value which should round-off to 1.
       
Question 3. Would your answer to Question 2 be different if the majority of classes had multiple instructors? How
about if only one or two classes had multiple instructors? (Explain your answer.)
Answer:For the option that I had choosen(Option B) can have good work around for the issue if multiple instructors for most of the courses because if we try to modify the field
       EnrollmentCount base on number of instructors to be equal to 1.



Scenario II
In this scenario, we are building a data warehouse for an online brokerage company. The company
makes money by charging commissions when customers buy and sell stocks. We are planning to have a Trades fact
table with the grain of one row per stock trade. We will use the following dimensions: Date, Customer, Account,
Security (i.e. which stock was traded), and TradeType.
The company’s data analysts have told us that they have developed two customer scoring techniques that are used
extensively in their analyses.
· Each customer is placed into one of nine Customer Activity Segments based on their frequency of
transactions, average transaction size, and recency of transactions.
· EachcustomerisassignedaCustomerProfitabilityScorebasedontheprofitsearnedasaresultofthatcustomer’s
trades. The score can be either 1,2,3,4, or 5, with 5 being the most profitable.
These two scores are frequently used as filters or grouping attributes in queries. For example:
· How many trades were placed in July by customers in each customer activity segment?
· What was the total commission earned in each quarter of 2003 on trades of IBM stock by customers
with a profitability score of 4 or 5?
There are a total of 100,000 customers, and scores are recalculated every three months. The activity level or
profitability level of some customers changes over time, and users are very interested in understanding how
and why this occurs.
We are considering several options for dealing with the customer scores:

Option A
ThescoresareattributesoftheCustomerdimension.Whenscoreschange,theoldscoreisoverwrittenwiththe new score
(Type 1 Slowly Changing Dimension).

Option B
The scores are attributes of the Customer dimension. When scores change, new Customer dimension rows are
created using the updated scores (Type 2 Slowly Changing Dimension).

Option C
The scores are stored in a separate CustomerScores dimension which contains 45 rows, one for each combi- nation
of activity and profitability scores. The Trades fact table includes a foreign key to the CustomerScores dimension.

Option D
The scores are stored in a CustomerScores outrigger table which contains 45 rows. The Customer dimension
includes a foreign key to the outrigger table (but the fact table does not). When scores change, the foreign key
column in the Customer table is updated to point to the correct outrigger row.

Please answer the following questions.
Question 5. What are the strengths and weaknesses of each option?
Answer:
Option A: This option is good for storing the Latest data but the limitation occurs when we wanted to search the history data because there will 
be updates happening on the hsitory data

Option B:This option will be good for storing the latest data as well as the history data and this will be used for good amount of analysis on the 
history data. The limitation on this table is that as it is SCD-2 table it will tend to grow as new record inserted so the table size will be increasing.

Option C:This approach of creating a new table withrespect to the combination of activity and profitability scores is kind of activity which decreases the overhead 
on the computation and we can directly join with fact table for the analysis. But, there are 2 issues we are creating a new table which will cause extra storage and 
its kind of static in terms of combinations of activity and profitability scores.

Option D:This approach will be creating a new table to another dimension table which will be using a foreign key on Customers table but there will not be any foreign key on
fact table.So, this will create cost more compared to the above approaches as there are 2 joins involved.

Question 6. Which option would you choose and why?
Answer:I would choose Option C because the computation time will be less and only query time will be there due to and we can store the data in the fact table like SCD-2 
which will be easy for analysis on current data as well as history data.

Question 7. Would your answer to Question 6 be different if the number of customers and/or the time interval
between score recalculations was much larger or much smaller? (Explain your answer.)
Answer:Only the time woould increase as query huge amount of data and if any combination occur we can add it in the CustomerScores dimension which would be the onetime activity.
